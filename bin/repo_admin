#!/usr/bin/env python
import optparse
import os
import sys
import time
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from anygit import clisetup
from anygit import models
from anygit.client import fetch

def main():
    parser = optparse.OptionParser('%prog [options] {add,list,approve,clear}')
    parser.add_option('-d', '--delay', dest='delay', type=float,
                      default=1.0, help='Delay between remote requests')
    parser.add_option('-a', '--all', dest='all', action='store_true', default=False,
                      help='Check even repos previously declared dead.')
    opts, args = parser.parse_args()
    if not len(args):
        parser.print_help()
        return 1
    if args[0] == 'add':
        if len(args) != 2:
            parser.print_help()
            return 2
        models.Repository.get_or_create(url=args[1])
    elif args[0] == 'list':
        if len(args) != 1:
            parser.print_help()
            return 2
        for repo in models.Repository.all():
            print '%s (approved: %s, last index: %s)' % (repo, repo.approved, repo.last_index)
    elif args[0] == 'approve':
        for repo in models.Repository.all():
            if repo.approved not in (True, False) or (repo.approved == False and opts.all):
                if fetch.check_validity(repo):
                    time.sleep(opts.delay)
                    repo.approved = True
                    repo.save()
                    print 'Approved %s' % repo
                else:
                    print '%s is dead' % repo
                    repo.approved = False
                    repo.save()
            models.flush()
    elif args[0] == 'clear':
        # Should only be used in development
        for repo in models.Repository.all():
            repo.indexing = False
            repo.save()
        models.flush()
    else:
        parser.print_help()
        return 3

if __name__ == '__main__':
    sys.exit(main())
